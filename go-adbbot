package main

import (

    "flag"

    "log"

    "runtime"

    "time"

    "./adbbot"

)

var verbosity = flag.Int("v", 2, "verbosity")

var ADB = flag.String("adb", "adb", "adb exec path")

var DEV = flag.String("dev", "", "select device")

var OnDevice = flag.Bool("od", true, "run on device")

var APP = flag.String("app", "com.android.vending", "app package name")

var TMPL = flag.String("tmpl", "tmpl.png", "app package name")

func main() {

    log.SetFlags(log.Ldate|log.Ltime)

    flag.Parse()

    runtime.GOMAXPROCS(runtime.NumCPU())

    adbbot.Verbosity = *verbosity

    bot := adbbot.NewLocalBot(*DEV, *ADB)

    // run on android by adb user(shell)

    bot.IsOnDevice = *OnDevice

    Vlogln(2, "[adb]", "รออุปกรณ์")

    _, err := bot.Adb("รออุปกรณ์")

    ถ้า err != ไม่มี {

        Vlogln(1, "adb err", ผิดพลาด)

    }

    // กดปุ่มโฮม

    bot.KeyHome()

    // เริ่ม APP

    bot.StartApp(*APP)

    // รอ

    time.Sleep(เวลา.มิลลิวินาที * 10000)

    // สร้างขอบเขตการจับคู่ระหว่าง Point <100,635> และ <9999,9999>

    //reg := bot.NewRectAbs(100, 635, 9999, 9999)

    // หรือทุกหน้าจอ (ช้า)

    reg := bot.NewRectAll()

    // สร้างเทมเพลตที่ตรงกัน

    tmpl ผิดพลาด:= bot.NewTmpl(*TMPL, reg)

    ถ้า err != ไม่มี {

        Vlogln(2, "โหลดภาพเทมเพลตผิดพลาด", ผิดพลาด)

    } อื่น {

        // พยายามหาเป้าหมาย

        // 10 ครั้งโดยมีความล่าช้า 1000ms ระหว่างการค้นหาแต่ละครั้ง

        x, y, val := bot.FindExistReg(tmpl, 10, 1000)

        ถ้า x == -1 && y == -1 {

            Vlogln(2, "template not found", x, y, val)

        } else {

            Vlogln(2, "template found at", x, y, val)

        }

    }

    infoname := time.Now().Format("20060102_150405")

    err = bot.SaveScreen(infoname + ".png")

    if err != nil {

        Vlogln(2, "SaveScreen err", err)

    } else {

        Vlogln(2, "SaveScreen as file ", infoname + ".png")

    }

    // force-stop APP

    bot.KillApp(*APP)

}

func Vlogln(level int, v ...interface{}) {

    if level <= *verbosity {

        log.Println(v...)

    }

}
